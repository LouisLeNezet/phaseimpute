nextflow_pipeline {

    name "Test phaseimpute workflow"
    script "main.nf"
    tag "pipeline"
    tag "pipeline/phaseimpute"


    test("Check test") {
        tag "test"
        config "../../../conf/test.config"
        when {
            params {
                pipelines_testdata_base_path = 'https://raw.githubusercontent.com/nf-core/test-datasets/phaseimpute/'
                outdir = "$outputDir"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    path("${outputDir}/imputation/")
                        .list()
                        .collect { getRecursiveFileNames(it, outputDir) }
                        .flatten(),
                    path("$outputDir/imputation/glimpse1/concat/all.glimpse1.vcf.gz").vcf.summary.replaceAll(", phasedAutodetect=(false|true)", ""),
                    path("$outputDir/imputation/glimpse1/concat/all.glimpse1.vcf.gz").vcf.header.getGenotypeSamples()
                ).match()
                }
            )
        }

    }

    test("Check test_glimpse2") {
        tag "test_glimpse2"
        config "../../../conf/test_glimpse2.config"
        when {
            params {
                pipelines_testdata_base_path = 'https://raw.githubusercontent.com/nf-core/test-datasets/phaseimpute/'
                outdir = "$outputDir"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    path("${outputDir}/imputation/")
                        .list()
                        .collect { getRecursiveFileNames(it, outputDir) }
                        .flatten(),
                    path("$outputDir/imputation/glimpse2/concat/all.glimpse2.vcf.gz").vcf.summary.replaceAll(", phasedAutodetect=(false|true)", ""),
                    path("$outputDir/imputation/glimpse2/concat/all.glimpse2.vcf.gz").vcf.header.getGenotypeSamples()
                ).match()
                }
            )
        }
    }

    test("Check test_quilt") {
        tag "test_quilt"
        config "../../../conf/test_quilt.config"
        when {
            params {
                pipelines_testdata_base_path = 'https://raw.githubusercontent.com/nf-core/test-datasets/phaseimpute/'
                outdir = "$outputDir"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    path("${outputDir}/imputation/")
                        .list()
                        .collect { getRecursiveFileNames(it, outputDir) }
                        .flatten(),
                    path("$outputDir/imputation/quilt/concat/all.quilt.vcf.gz").vcf.summary.replaceAll(", phasedAutodetect=(false|true)", ""),
                    path("$outputDir/imputation/quilt/concat/all.quilt.vcf.gz").vcf.header.getGenotypeSamples()
                ).match()
                }
            )
        }

    }

    test("Check test_stitch") {
        tag "test_stitch"
        config "../../../conf/test_stitch.config"
        when {
            params {
                pipelines_testdata_base_path = 'https://raw.githubusercontent.com/nf-core/test-datasets/phaseimpute/'
                outdir = "$outputDir"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    path("${outputDir}/imputation/")
                        .list()
                        .collect { getRecursiveFileNames(it, outputDir) }
                        .flatten(),
                    path("$outputDir/imputation/stitch/concat/all.stitch.vcf.gz").vcf.summary.replaceAll(", phasedAutodetect=(false|true)", ""),
                    path("$outputDir/imputation/stitch/concat/all.stitch.vcf.gz").vcf.header.getGenotypeSamples()
                ).match()
                }
            )
        }

    }

    test("Check test_sim") {
        tag "test_sim"
        config "../../../conf/test_sim.config"
        when {
            params {
                pipelines_testdata_base_path = 'https://raw.githubusercontent.com/nf-core/test-datasets/phaseimpute/'
                outdir = "$outputDir"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    path("${outputDir}/simulation/")
                        .list()
                        .collect { getRecursiveFileNames(it, outputDir) }
                        .flatten(),
                ).match() }
            )
        }
    }

    test("Check test_validate") {
        tag "test_validate"
        config "../../../conf/test_validate.config"
        when {
            params {
                pipelines_testdata_base_path = 'https://raw.githubusercontent.com/nf-core/test-datasets/phaseimpute/'
                outdir = "$outputDir"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    path("${outputDir}/validation/")
                        .list()
                        .collect { getRecursiveFileNames(it, outputDir) }
                        .flatten()
                ).match() }
            )
        }

    }

    test("Check test_all") {
        tag "test_all"
        config "../../../conf/test_all.config"
        when {
            params {
                pipelines_testdata_base_path = 'https://raw.githubusercontent.com/nf-core/test-datasets/phaseimpute/'
                outdir = "$outputDir"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    path("${outputDir}/simulation")
                        .list()
                        .collect { getRecursiveFileNames(it, outputDir) }
                        .flatten(),
                    path("${outputDir}/imputation")
                        .list()
                        .collect { getRecursiveFileNames(it, outputDir) }
                        .flatten(),
                    path("${outputDir}/prep_panel")
                        .list()
                        .collect { getRecursiveFileNames(it, outputDir) }
                        .flatten(),
                    path("${outputDir}/validation")
                        .list()
                        .collect { getRecursiveFileNames(it, outputDir) }
                        .flatten(),
                    path("${outputDir}/imputation/glimpse1/concat/all.glimpse1.vcf.gz").vcf.summary.replaceAll(", phasedAutodetect=(false|true)", ""),
                    path("${outputDir}/imputation/glimpse1/concat/all.glimpse1.vcf.gz").vcf.header.getGenotypeSamples(),
                    path("${outputDir}/imputation/glimpse2/concat/all.glimpse2.vcf.gz").vcf.summary.replaceAll(", phasedAutodetect=(false|true)", ""),
                    path("${outputDir}/imputation/glimpse2/concat/all.glimpse2.vcf.gz").vcf.header.getGenotypeSamples(),
                    path("${outputDir}/imputation/stitch/concat/all.stitch.vcf.gz").vcf.summary.replaceAll(", phasedAutodetect=(false|true)", ""),
                    path("${outputDir}/imputation/stitch/concat/all.stitch.vcf.gz").vcf.header.getGenotypeSamples(),
                    path("${outputDir}/imputation/quilt/concat/all.quilt.vcf.gz").vcf.summary.replaceAll(", phasedAutodetect=(false|true)", ""),
                    path("${outputDir}/imputation/quilt/concat/all.quilt.vcf.gz").vcf.header.getGenotypeSamples()
                ).match()
                }
            )
        }
    }

    test("Check test_dog") {
        tag "test_dog"
        config "../../../conf/test_dog.config"
        when {
            params {
                pipelines_testdata_base_path = 'https://raw.githubusercontent.com/nf-core/test-datasets/phaseimpute/'
                outdir = "$outputDir"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    path("${outputDir}/prep_panel")
                        .list()
                        .collect { getRecursiveFileNames(it, outputDir) }
                        .flatten(),
                ).match()
                }
            )
        }
    }

    test("Check test_panelprep") {
        tag "test_panelprep"
        config "../../../conf/test_panelprep.config"
        when {
            params {
                pipelines_testdata_base_path = 'https://raw.githubusercontent.com/nf-core/test-datasets/phaseimpute/'
                outdir = "$outputDir"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    path("${outputDir}/prep_panel")
                        .list()
                        .collect { getRecursiveFileNames(it, outputDir) }
                        .flatten(),
                ).match()
                }
            )
        }
    }

    test("Check test_batch") {
        tag "test_batch"
        config "../../../conf/test.config"
        when {
            params {
                pipelines_testdata_base_path = 'https://raw.githubusercontent.com/nf-core/test-datasets/phaseimpute/'
                outdir     = "$outputDir"
                tools      = "glimpse2,quilt"
                batch_size = 2
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    path("${outputDir}/imputation/")
                        .list()
                        .collect { getRecursiveFileNames(it, outputDir) }
                        .flatten(),
                    path("${outputDir}/imputation/glimpse1/concat/all.glimpse1.vcf.gz").vcf.summary.replaceAll(", phasedAutodetect=(false|true)", ""),
                    path("${outputDir}/imputation/glimpse1/concat/all.glimpse1.vcf.gz").vcf.header.getGenotypeSamples(),
                    path("${outputDir}/imputation/glimpse2/concat/all.glimpse2.vcf.gz").vcf.summary.replaceAll(", phasedAutodetect=(false|true)", ""),
                    path("${outputDir}/imputation/glimpse2/concat/all.glimpse2.vcf.gz").vcf.header.getGenotypeSamples(),
                    path("${outputDir}/imputation/stitch/concat/all.stitch.vcf.gz").vcf.summary.replaceAll(", phasedAutodetect=(false|true)", ""),
                    path("${outputDir}/imputation/stitch/concat/all.stitch.vcf.gz").vcf.header.getGenotypeSamples(),
                    path("${outputDir}/imputation/quilt/concat/all.quilt.vcf.gz").vcf.summary.replaceAll(", phasedAutodetect=(false|true)", ""),
                    path("${outputDir}/imputation/quilt/concat/all.quilt.vcf.gz").vcf.header.getGenotypeSamples()
                ).match()
                }
            )
        }
    }
}

def getRecursiveFileNames(fileOrDir, outputDir) {
    if(file(fileOrDir.toString()).isDirectory()) {
        return fileOrDir.list().collect { getRecursiveFileNames(it, outputDir) }
    }
    return fileOrDir.toString().replace("${outputDir}/", "")
}
